diff --git a/node_modules/eth-block-tracker/dist/PollingBlockTracker.d.ts b/node_modules/eth-block-tracker/dist/PollingBlockTracker.d.ts
index 808ef5b..060292e 100644
--- a/node_modules/eth-block-tracker/dist/PollingBlockTracker.d.ts
+++ b/node_modules/eth-block-tracker/dist/PollingBlockTracker.d.ts
@@ -5,6 +5,8 @@ interface PollingBlockTrackerArgs {
     retryTimeout: number;
     keepEventLoopActive: boolean;
     setSkipCacheFlag: boolean;
+    isUnlocked: ()=> boolean;
+    isBackground: ()=> boolean;
 }
 export declare class PollingBlockTracker extends BaseBlockTracker {
     private _provider;
@@ -12,6 +14,8 @@ export declare class PollingBlockTracker extends BaseBlockTracker {
     private _retryTimeout;
     private _keepEventLoopActive;
     private _setSkipCacheFlag;
+    private _isUnlocked;
+    private _isBackground;
     constructor(opts?: Partial<PollingBlockTrackerArgs>);
     checkForLatestBlock(): Promise<string>;
     protected _start(): void;
diff --git a/node_modules/eth-block-tracker/dist/PollingBlockTracker.js b/node_modules/eth-block-tracker/dist/PollingBlockTracker.js
index 4229a09..5ded308 100644
--- a/node_modules/eth-block-tracker/dist/PollingBlockTracker.js
+++ b/node_modules/eth-block-tracker/dist/PollingBlockTracker.js
@@ -24,6 +24,14 @@ class PollingBlockTracker extends BaseBlockTracker_1.BaseBlockTracker {
         this._retryTimeout = opts.retryTimeout || this._pollingInterval / 10;
         this._keepEventLoopActive = opts.keepEventLoopActive === undefined ? true : opts.keepEventLoopActive;
         this._setSkipCacheFlag = opts.setSkipCacheFlag || false;
+        this._isUnlocked = opts.isUnlocked || this.defaultIsUnlocked;
+        this._isBackground = opts.isBackground || this.defaultIsBackground;
+    }
+    defaultIsBackground(){
+        return Promise.resolve(false);
+    }
+    defaultIsUnlocked(){
+        return true;
     }
     // trigger block polling
     async checkForLatestBlock() {
@@ -36,7 +44,11 @@ class PollingBlockTracker extends BaseBlockTracker_1.BaseBlockTracker {
     async _synchronize() {
         while (this._isRunning) {
             try {
-                await this._updateLatestBlock();
+                const isBackground = await this._isBackground();
+                const isUnLock = this._isUnlocked();
+                if(isUnLock && !isBackground) {
+                    await this._updateLatestBlock();
+                }
                 await timeout(this._pollingInterval, !this._keepEventLoopActive); 
             }
             catch (err) {
